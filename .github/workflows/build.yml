name: Build

on:
  workflow_dispatch:
  schedule:
    - cron: '0 * * * *'

concurrency:
  group: build
  cancel-in-progress: false

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    permissions:
      actions: write
      packages: write
      contents: read
    steps:
      - 
        name: Get latest tag
        run: |
          #!/bin/bash
          latest_tag="0.1.240"
          [ -z "$latest_tag" ] && echo "Tag not found!" && exit 1
          [[ "$latest_tag" == "null" ]] && echo "Tag not found!" && exit 1
          [[ "$latest_tag" = v* ]] && latest_tag="${latest_tag:1}"
          echo "Found tag: \"${latest_tag}\""
          echo "latest_tag=$latest_tag" >> $GITHUB_ENV
      - 
        name: Check if the tag exists locally
        uses: action-pack/tag-exists@v1
        id: checkTag
        with: 
          tag: 'v${{ env.latest_tag }}'         
      -
        name: Finish when found
        run: |
          #!/bin/bash
          if [[ "${{ steps.checkTag.outputs.exists }}" == "true" ]]; then
            echo "exists=true" >> $GITHUB_ENV
            exit 0
          fi
          loc="${{ env.latest_tag }}"
          url="https://fedorapeople.org/groups/virt/virtio-win/direct-downloads/archive-virtio/virtio-win-${loc}-1"
          echo "Checking if ${url} exists.."
          resp=$(curl -I 2>/dev/null $url | head -1)
          if echo $resp | grep 404 >/dev/null; then
           echo "exists=true" >> $GITHUB_ENV
          else
           echo "exists=false" >> $GITHUB_ENV
          fi
      -
        name: Build minified ISO
        if: env.exists == 'false'
        id: version
        run: |
          #!/bin/bash
          wget "https://fedorapeople.org/groups/virt/virtio-win/direct-downloads/archive-virtio/virtio-win-${{ env.latest_tag }}-1/virtio-win-${{ env.latest_tag }}.iso" -O /tmp/latest.iso -q  
          mkdir /tmp/iso
          7z x /tmp/latest.iso -o /tmp/iso
          
      -
        name: Checkout
        if: env.exists == 'false'
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      -
        name: Docker metadata
        id: meta
        if: env.exists == 'false'
        uses: docker/metadata-action@v5
        with:
          context: git
          images: |
            ${{ secrets.DOCKERHUB_REPO }}
            ghcr.io/${{ github.repository }}
          tags: |
            type=raw,value=latest,priority=100,enable=true
            type=raw,value=${{ env.latest_tag }}
          labels: |
            org.opencontainers.image.title=${{ vars.NAME }}
        env:
          DOCKER_METADATA_ANNOTATIONS_LEVELS: manifest,index
      - 
        name: Set up Docker Buildx
        if: env.exists == 'false'
        uses: docker/setup-buildx-action@v3
      -
        name: Login into Docker Hub
        if: env.exists == 'false'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      -
        name: Login to GitHub Container Registry
        if: env.exists == 'false'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      -
        name: Build Docker image
        if: env.exists == 'false'
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          provenance: false
          platforms: linux/amd64,linux/arm/v7,linux/arm64
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          annotations: ${{ steps.meta.outputs.annotations }}
          build-args: |
            VERSION_ARG=${{ steps.meta.outputs.version }}
      -
        name: Create a release
        if: env.exists == 'false'
        uses: action-pack/github-release@v2
        with:
          tag: "v${{ steps.meta.outputs.version }}"
          title: "v${{ steps.meta.outputs.version }}"
          token: ${{ secrets.REPO_ACCESS_TOKEN }}
      -
       name: Send mail
       if: env.exists == 'false'
       uses: dawidd6/action-send-mail@v3
       with:
         to: ${{secrets.MAILTO}}
         from: Github Actions <${{secrets.MAILTO}}>
         connection_url: ${{secrets.MAIL_CONNECTION}}
         subject: Build of ${{ github.event.repository.name }} v${{ steps.meta.outputs.version }} completed
         body: |
              The build job of ${{ github.event.repository.name }} v${{ steps.meta.outputs.version }} was completed successfully! 
              
              See https://github.com/${{ github.repository }}/actions for more information.
