name: Build

on:
  workflow_dispatch:
  schedule:
    - cron: '0 0 * * *'

concurrency:
  group: build
  cancel-in-progress: false

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    permissions:
      actions: write
      packages: write
      contents: read
    steps:
      - 
        name: Get latest tag
        run: |
          #!/bin/bash
          url="https://fedorapeople.org/groups/virt/virtio-win/direct-downloads/latest-virtio/"
          resp=$(curl -sS $url)
          latest_tag=$(echo "$resp" | grep -o 'href="[^"]*' | tail -c +98 | sed 's/...$//')
          [ -z "$latest_tag" ] && echo "Tag not found!" && exit 1
          [[ "$latest_tag" = v* ]] && latest_tag="${latest_tag:1}"
          echo "Found tag: \"${latest_tag}\""
          echo "latest_tag=$latest_tag" >> $GITHUB_ENV
      - 
        name: Check if the tag exists locally
        uses: action-pack/tag-exists@v1
        id: checkTag
        with: 
          tag: 'v${{ env.latest_tag }}'         
      -
        name: Finish when found
        run: |
          #!/bin/bash
          if [[ "${{ steps.checkTag.outputs.exists }}" == "true" ]]; then
            echo "exists=true" >> $GITHUB_ENV
            exit 0
          fi
          loc="${{ env.latest_tag }}"
          url="https://fedorapeople.org/groups/virt/virtio-win/direct-downloads/archive-virtio/virtio-win-${loc}-1"
          echo "Checking if ${url} exists.."
          resp=$(curl -I 2>/dev/null $url | head -1)
          if echo $resp | grep 404 >/dev/null; then
           echo "Download $url not found!" && exit 1
          else
           echo "exists=false" >> $GITHUB_ENV
          fi
      -
        name: Build minified ISO
        if: env.exists == 'false'
        id: version
        run: |
          #!/bin/bash
          strip="y"
          sudo apt install genisoimage libarchive-tools
          rm -f /tmp/latest.iso
          wget "https://fedorapeople.org/groups/virt/virtio-win/direct-downloads/archive-virtio/virtio-win-${{ env.latest_tag }}-1/virtio-win-${{ env.latest_tag }}.iso" -O "/tmp/latest.iso" -q
          rm -rf /tmp/iso && mkdir /tmp/iso
          bsdtar -xf "/tmp/latest.iso" -C /tmp/iso/
          cd /tmp/iso
          echo & echo
          if [[ ${strip,,} == "y" ]]; then
            # Remove tools for different platforms
            sudo rm -rf /tmp/iso/i386
            sudo rm -rf /tmp/iso/guest-agent
            sudo rm -f /tmp/iso/virtio-win-gt-x86.msi
            sudo rm -f /tmp/iso/virtio-win-guest-tools.exe
            sudo rm -f /tmp/iso/guest-agent/qemu-ga-i386.msi
            # Remove debug symbols
            sudo find /tmp/iso -name "*.pdb" -type f -delete
            sudo find /tmp/iso -name "*.PDB" -type f -delete
            # Exlcude XP x86 drivers
            sudo mv /tmp/iso/NetKVM/xp/x86 /tmp/iso/NetKVM/xp/z86
            sudo mv /tmp/iso/viostor/xp/x86 /tmp/iso/viostor/xp/z86
            # Remove binaries
            sudo find /tmp/iso -name "ARM64" -type d -exec  rm -rf {} +
            sudo find /tmp/iso -name "Arm64" -type d -exec rm -rf {} +
            sudo find /tmp/iso -name "arm64" -type d -exec rm -rf {} +
            sudo find /tmp/iso -name "x86" -type d -exec rm -rf {} +
            sudo find /tmp/iso -name "X86" -type d -exec rm -rf {} +
            # Include some XP x86 drivers
            sudo mv /tmp/iso/NetKVM/xp/z86 /tmp/iso/NetKVM/xp/x86
            sudo mv /tmp/iso/viostor/xp/z86 /tmp/iso/viostor/xp/x86
            # Remove empty directories
            sudo find . -type d -empty -delete
          fi
          echo & echo
          wget "https://downloadmirror.intel.com/23295/eng/f6flpy-x86_11.2.0.1006.zip" -O "/tmp/satax86.zip" -q
          wget "https://downloadmirror.intel.com/23295/eng/f6flpy-x64_11.2.0.1006.zip" -O "/tmp/satax64.zip" -q
          mkdir -p /tmp/iso/sata/xp/x86
          mkdir -p /tmp/iso/sata/xp/amd64
          unzip /tmp/satax86.zip -d /tmp/iso/sata/xp/x86
          unzip /tmp/satax64.zip -d /tmp/iso/sata/xp/amd64
          echo & echo
          genisoimage -o /tmp/out.iso -r -iso-level 4 -input-charset iso8859-1 -V "virtio-win-${{ env.latest_tag }}" /tmp/iso
          mv /tmp/out.iso /tmp/virtio-win-${{ env.latest_tag }}.iso
      -
        name: Checkout
        if: env.exists == 'false'
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      -
        name: Create artifact
        if: env.exists == 'false'
        uses: actions/upload-artifact@v4
        with:
          name: virtio-win-${{ env.latest_tag }}.iso
          path: /tmp/virtio-win-${{ env.latest_tag }}.iso
      -
        name: Create a release
        if: env.exists == 'false'
        uses: action-pack/github-release@v2
        with:
          tag: "v${{ env.latest_tag }}"
          title: "v${{ env.latest_tag }}"
          token: ${{ secrets.REPO_ACCESS_TOKEN }}
      -
        name: Update release
        if: env.exists == 'false'
        uses: AButler/upload-release-assets@v3.0
        with:
          files: '/tmp/virtio-win-${{ env.latest_tag }}.iso'
          release-tag: "v${{ env.latest_tag }}"
          repo-token: ${{ secrets.REPO_ACCESS_TOKEN }}
      -
       name: Send mail
       if: env.exists == 'false'
       uses: action-pack/send-mail@v1
       with:
         to: ${{secrets.MAILTO}}
         from: Github Actions <${{secrets.MAILTO}}>
         connection_url: ${{secrets.MAIL_CONNECTION}}
         subject: Build of ${{ github.event.repository.name }} v${{ env.latest_tag }} completed
         body: |
              The build job of ${{ github.event.repository.name }} v${{ env.latest_tag }} was completed successfully! 
              
              See https://github.com/${{ github.repository }}/actions for more information.
